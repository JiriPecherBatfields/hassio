{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to my Home Assistant config docs Here I have documented any important aspect of my Home Assistant Configuration. Everything is free to use both commersially or open source (MIT). Attribution are always welcome and that you pay it forward by helping people out in this great community. My repos Hassio configuration , my configuration of my Home Assistant (Hass.io).","title":"Welcome"},{"location":"#welcome-to-my-home-assistant-config-docs","text":"Here I have documented any important aspect of my Home Assistant Configuration. Everything is free to use both commersially or open source (MIT). Attribution are always welcome and that you pay it forward by helping people out in this great community.","title":"Welcome to my Home Assistant config docs"},{"location":"#my-repos","text":"Hassio configuration , my configuration of my Home Assistant (Hass.io).","title":"My repos"},{"location":"about/","text":"About My name is Tomas Hellstr\u00f6m (helto4real). I am a father, husband and a geek, not necessary in that order :) I am a hobby photographer and open source software developer that are coding mostly home automation stuff. look here for my photography portfolio and you will find all my projects at Github I code quite fluently in c# .NET Python go C++ Javascript And of cource if you want to show a small apreachiation a cup of coffee are always welcome <3","title":"About"},{"location":"about/#about","text":"My name is Tomas Hellstr\u00f6m (helto4real). I am a father, husband and a geek, not necessary in that order :) I am a hobby photographer and open source software developer that are coding mostly home automation stuff. look here for my photography portfolio and you will find all my projects at Github I code quite fluently in c# .NET Python go C++ Javascript And of cource if you want to show a small apreachiation a cup of coffee are always welcome <3","title":"About"},{"location":"gear/","text":"My gear Intel NUC Debian, docker with Hass.IO Appdaemon, most of my stuff is done in appdaemon, check it out! Duck DNS, Mosquitto, Samba Share add-ons Raspberry PI 3B+ , NodeMCU for fun stuff like sensors RFXtrx433E USB for 433MHz devices (works better than Telldus Duo) Aurel GP 433 external anthenna for RFXtrx sensitivity Conbee usb stick for Zigbee and deconz Razberry Z-wave (not currently use z-wave yet) Telldus temperature sensors Telldus switches (indoors and outdoors) Xiaomi temp/hum sensors, door sensors, motion sensors Nexa light switch IKEA Tr\u00e5dfri lights IKEA Tr\u00e5dfri motions sensors Osram Zigbee outdoor plugs x 2 Osram Zigbee indoor plug Sonoff wifi smartswitch Unifi AP wifi (used as wifitracker) Google Maps (used as gps tracker) NUC Bluetooh (used as BT tracker) My usecases See projects to see what use-cases I implemented and wants to implement","title":"My gear"},{"location":"gear/#my-gear","text":"Intel NUC Debian, docker with Hass.IO Appdaemon, most of my stuff is done in appdaemon, check it out! Duck DNS, Mosquitto, Samba Share add-ons Raspberry PI 3B+ , NodeMCU for fun stuff like sensors RFXtrx433E USB for 433MHz devices (works better than Telldus Duo) Aurel GP 433 external anthenna for RFXtrx sensitivity Conbee usb stick for Zigbee and deconz Razberry Z-wave (not currently use z-wave yet) Telldus temperature sensors Telldus switches (indoors and outdoors) Xiaomi temp/hum sensors, door sensors, motion sensors Nexa light switch IKEA Tr\u00e5dfri lights IKEA Tr\u00e5dfri motions sensors Osram Zigbee outdoor plugs x 2 Osram Zigbee indoor plug Sonoff wifi smartswitch Unifi AP wifi (used as wifitracker) Google Maps (used as gps tracker) NUC Bluetooh (used as BT tracker)","title":"My gear"},{"location":"gear/#my-usecases","text":"See projects to see what use-cases I implemented and wants to implement","title":"My usecases"},{"location":"license/","text":"MIT License Copyright (c) 2018 Tomas Hellstr\u00f6m Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"docker/bluetooth/","text":"MQTT Bluetooth presence This is the bluetooth precense detection through bluetooth. Checkout the https://github.com/andrewjfreyer/presence for details of usage. Thanks Andrew Freyer for your great work. This has been tested on intel nuc machines running linux but it could work on Raspberry PI too. You may or not need sudo before all commands in this setup, depending on your setup. Requirements - You need MQTT enabled on this or any host in your network - Bluetooth enabled in hardware - Bluetooth service disabled on host system (see Check host system) Installation Check host system Check that bluetooth is enabled for your nuc hardware. Make sure the bluetooth service not running on the NUC. Easiest is to make sure service bluetooth not running. Depending on operating system, write service --status-all to or systemctl status service_name . If it is running, stop it and maker sure it don\u00b4t run at startup. (You would have to google for that one :) ) Make docker image Check the docker.compose.yaml file to see if you want to map the volumes differently. Change for your own pleasure. Copy the content in the folder nuc_bluetooth to your device, as root type `docker-compose up -d'. Now it will build the image and and install the service In the host volume you specified, change MQTT settings as specified in the file mqtt_preferences Restart docker by running docker-compose restart View log in portainer.io or write docker logs hass_bluetooth --follow to view the logs for errors Configure devices to scan for Finding MAC of your devices Login as root Run the command docker exec -it hass_bluetooth hcitool scan Turn bluetooth on/off on the device during scan make it faster to find the device. Use that mac address on screen Configure devices Put the MAC addresses of the BT device in the owner_devices file Restart docker docker-compose restart or in portainer.io and check log i.e. docker logs hass_bluetooth --follow or in portainer.io. In the logs you can see the full mqtt-topic for the devices to put in the Home assistant config. Configure Home Assistant See https://github.com/andrewjfreyer/presence and logs for the topic used.","title":"Bluetooth tracker"},{"location":"docker/bluetooth/#mqtt-bluetooth-presence","text":"This is the bluetooth precense detection through bluetooth. Checkout the https://github.com/andrewjfreyer/presence for details of usage. Thanks Andrew Freyer for your great work. This has been tested on intel nuc machines running linux but it could work on Raspberry PI too. You may or not need sudo before all commands in this setup, depending on your setup. Requirements - You need MQTT enabled on this or any host in your network - Bluetooth enabled in hardware - Bluetooth service disabled on host system (see Check host system)","title":"MQTT Bluetooth presence"},{"location":"docker/bluetooth/#installation","text":"","title":"Installation"},{"location":"docker/bluetooth/#check-host-system","text":"Check that bluetooth is enabled for your nuc hardware. Make sure the bluetooth service not running on the NUC. Easiest is to make sure service bluetooth not running. Depending on operating system, write service --status-all to or systemctl status service_name . If it is running, stop it and maker sure it don\u00b4t run at startup. (You would have to google for that one :) )","title":"Check host system"},{"location":"docker/bluetooth/#make-docker-image","text":"Check the docker.compose.yaml file to see if you want to map the volumes differently. Change for your own pleasure. Copy the content in the folder nuc_bluetooth to your device, as root type `docker-compose up -d'. Now it will build the image and and install the service In the host volume you specified, change MQTT settings as specified in the file mqtt_preferences Restart docker by running docker-compose restart View log in portainer.io or write docker logs hass_bluetooth --follow to view the logs for errors","title":"Make docker image"},{"location":"docker/bluetooth/#configure-devices-to-scan-for","text":"","title":"Configure devices to scan for"},{"location":"docker/bluetooth/#finding-mac-of-your-devices","text":"Login as root Run the command docker exec -it hass_bluetooth hcitool scan Turn bluetooth on/off on the device during scan make it faster to find the device. Use that mac address on screen","title":"Finding MAC of your devices"},{"location":"docker/bluetooth/#configure-devices","text":"Put the MAC addresses of the BT device in the owner_devices file Restart docker docker-compose restart or in portainer.io and check log i.e. docker logs hass_bluetooth --follow or in portainer.io. In the logs you can see the full mqtt-topic for the devices to put in the Home assistant config.","title":"Configure devices"},{"location":"docker/bluetooth/#configure-home-assistant","text":"See https://github.com/andrewjfreyer/presence and logs for the topic used.","title":"Configure Home Assistant"},{"location":"docker/deconz/","text":"Setup deconz in docker As many users of Hass.io you will have several serial devices but the deconz requires the devices to be ttyUSB0 for conbee stick. Here is a trick to manage this. Make presistent device names Check this guide for details. First find out what device id you have for your serial devices If you know which device you want to get details about, run $ /bin/udevadm info --name=/dev/ttyUSB0 | grep ID_VENDOR E: ID_VENDOR_ID=0403 $ /bin/udevadm info --name=/dev/ttyUSB0 | grep ID_MODEL_ID E: ID_MODEL_ID=6015 $ /bin/udevadm info --name=/dev/ttyUSB0 | grep SERIAL_SHORT E: ID_SERIAL_SHORT=ABC01234 $ lsusb Bus 002 Device 004: ID 0403:6015 Future Technology Devices International, Ltd Bridge(I2C/SPI/UART/FIFO) Bus 002 Device 003: ID 0403:6001 Future Technology Devices International, Ltd FT232 USB-Serial (UART) IC One of the two devices is my conbee device have to find out which. Look for something similar to below to find your conbee device $ more /var/log/messages | grep ttyUSB -B 7 -A 7 New USB device found, idVendor=0403, idProduct=6015 Product: FT230X Basic UART Manufacturer: FTDI SerialNumber: DO00KDGR Make UDEV rules create a file at: /etc/udev/rules.d/99-usb-serial.rules Make sure your id:s and serial number matches! SUBSYSTEM==\"tty\", ATTRS{idVendor}==\"0403\", ATTRS{idProduct}==\"6015\", ATTRS{serial}==\"DO00KDGR\", SYMLINK+=\"ttyUSB.CON\" SUBSYSTEM==\"tty\", ATTRS{idVendor}==\"0403\", ATTRS{idProduct}==\"6001\", ATTRS{serial}==\"A138UEXZ\", SYMLINK+=\"ttyUSB.RFX\" restart and you will have two new devices ttyUSB.CON and ttyUSB.RFX that will be correctly mapped every time. check with ls /dev and check link with ls -l /dev/ttyUSB.CON In my example I use rfxtrx usb too. Starting the deconz docker container Now you can map ttyUSB.CON to ttyUSB0 as the example below... And youre done! $ sudo docker run -d \\ --name=deconz \\ --net=host \\ --restart=always \\ -e DECONZ_WEB_PORT=8080 \\ -e DECONZ_WS_PORT=8443 \\ -v /opt/deconz:/root/.local/share/dresden-elektronik/deCONZ \\ --device=/dev/ttyUSB.CON:/dev/ttyUSB0 \\ marthoc/deconz or use my docker compose file in this folder version: \"2\" services: deconz: image: marthoc/deconz container_name: deconz network_mode: host restart: always volumes: - /opt/deconz:/root/.local/share/dresden-elektronik/deCONZ devices: - /dev/ttyUSB.CON:/dev/ttyUSB0 environment: - DECONZ_WEB_PORT=8080 - DECONZ_WS_PORT=8443 - DEBUG_INFO=1 - DEBUG_APS=0 - DEBUG_ZCL=0 - DEBUG_ZDP=0 - DEBUG_OTAU=0","title":"Deconz"},{"location":"docker/deconz/#setup-deconz-in-docker","text":"As many users of Hass.io you will have several serial devices but the deconz requires the devices to be ttyUSB0 for conbee stick. Here is a trick to manage this.","title":"Setup deconz in docker"},{"location":"docker/deconz/#make-presistent-device-names","text":"Check this guide for details. First find out what device id you have for your serial devices If you know which device you want to get details about, run $ /bin/udevadm info --name=/dev/ttyUSB0 | grep ID_VENDOR E: ID_VENDOR_ID=0403 $ /bin/udevadm info --name=/dev/ttyUSB0 | grep ID_MODEL_ID E: ID_MODEL_ID=6015 $ /bin/udevadm info --name=/dev/ttyUSB0 | grep SERIAL_SHORT E: ID_SERIAL_SHORT=ABC01234 $ lsusb Bus 002 Device 004: ID 0403:6015 Future Technology Devices International, Ltd Bridge(I2C/SPI/UART/FIFO) Bus 002 Device 003: ID 0403:6001 Future Technology Devices International, Ltd FT232 USB-Serial (UART) IC One of the two devices is my conbee device have to find out which. Look for something similar to below to find your conbee device $ more /var/log/messages | grep ttyUSB -B 7 -A 7 New USB device found, idVendor=0403, idProduct=6015 Product: FT230X Basic UART Manufacturer: FTDI SerialNumber: DO00KDGR Make UDEV rules create a file at: /etc/udev/rules.d/99-usb-serial.rules Make sure your id:s and serial number matches! SUBSYSTEM==\"tty\", ATTRS{idVendor}==\"0403\", ATTRS{idProduct}==\"6015\", ATTRS{serial}==\"DO00KDGR\", SYMLINK+=\"ttyUSB.CON\" SUBSYSTEM==\"tty\", ATTRS{idVendor}==\"0403\", ATTRS{idProduct}==\"6001\", ATTRS{serial}==\"A138UEXZ\", SYMLINK+=\"ttyUSB.RFX\" restart and you will have two new devices ttyUSB.CON and ttyUSB.RFX that will be correctly mapped every time. check with ls /dev and check link with ls -l /dev/ttyUSB.CON In my example I use rfxtrx usb too.","title":"Make presistent device names"},{"location":"docker/deconz/#starting-the-deconz-docker-container","text":"Now you can map ttyUSB.CON to ttyUSB0 as the example below... And youre done! $ sudo docker run -d \\ --name=deconz \\ --net=host \\ --restart=always \\ -e DECONZ_WEB_PORT=8080 \\ -e DECONZ_WS_PORT=8443 \\ -v /opt/deconz:/root/.local/share/dresden-elektronik/deCONZ \\ --device=/dev/ttyUSB.CON:/dev/ttyUSB0 \\ marthoc/deconz or use my docker compose file in this folder version: \"2\" services: deconz: image: marthoc/deconz container_name: deconz network_mode: host restart: always volumes: - /opt/deconz:/root/.local/share/dresden-elektronik/deCONZ devices: - /dev/ttyUSB.CON:/dev/ttyUSB0 environment: - DECONZ_WEB_PORT=8080 - DECONZ_WS_PORT=8443 - DEBUG_INFO=1 - DEBUG_APS=0 - DEBUG_ZCL=0 - DEBUG_ZDP=0 - DEBUG_OTAU=0","title":"Starting the deconz docker container"},{"location":"docker/nginx/","text":"Setup nginx, letsencrypt for improved security I let you know my configuration to setup the reverse proxy (nginx) as a front with SSL for Home Assistant. My setup enables: - Access Home Assistant with SSL from outside firewall through standard port and is routed to the home assistant on port 8123. - Access Home Assistant from within the network (behind firewall) without SSL and using http://ip:8123 - In future expose more services on standard port 443 by extending nginx config DISCLAIMER: I dont take any responsibility that this configuration is 100% secure. It is more secure than not using a reverse proxy I would argue but I am not making any guarantees. I would recommend you read how to configure this your self Many would argue to improve security at a pro level is to use a real firewall with different v-lans for your devices and computers. This is not covered in this setup. Hass config I use api password for security and not using trusted_networks for improved security. If you want to use trusted_networks I would not use a reverse proxy with x_forwarded_for: True config. There is a risk of hacking into hass by inserting the x_forwarded header without login! I also enabled ip-ban and login attempts for even better security. http: api_password: !secret http_password ip_ban_enabled: True login_attempts_threshold: 3 use_x_forwarded_for: True linuxserver/letsencrypt Setup the linux server by using the provided docker-compose file. Mine is configured to listen to port 80/443 and I setup my routers portforwarding to point to the host, hosting this docker image. You will need the port 80 open to allow the letsecrypt to validate ownership of your domain. After that is completed and you get your certificates you can just leave the 80 closed and only forward 443 or any custom port you want to expose from the internet. Just make sure you change that in the compose-file. Change the domain.example to your domain. If you use duckdns, use the whole address like xyz.duckdns.org . If you plan to expose several subdomains, use the SUBDOMAINS settings. At least expose the standard and www . But you might want to expose grafana.expample.com , just put ,grafana there. Copy the file and run sudo docker-compose up -d while on the same directory as the docker-compose.yaml file. Check the log to make sure the certificates are created correctly. Setup nginx First you want the ssl to configured to the correct certificates. 1. SSL certificates You can see the paths in the log. The ssl config are at: /opt/letsencrypt/config/ngingx/ssl.conf if you used my settings in docker-compose.yaml. Mine are in config folder (github) as reference. # ssl certs ssl_certificate /etc/letsencrypt/live/domain.example/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/domain.example/privkey.pem; 2. Default server Go to the folder /opt/letsencrypt/config/nginx/site-confs edit the default . See config folder here for reference. All requests by default both on 80 and 443 is redirected to return 444. server { listen 80; server_name _; return 444; } server { listen 443 ssl; server_name _; include /config/nginx/ssl.conf; return 444; } 3. Hassio server Now we make a new file in /opt/letsencrypt/config/nginx/site-confs called hassio . The config is when you surf with domain.example (default 443) it routes it to your_hass_ip:8123. map $http_upgrade $connection_upgrade { default upgrade; '' close; } server { listen 443 ssl; server_name domain.example; include /config/nginx/ssl.conf; proxy_buffering off; location / { proxy_pass ip_to_hass:8123; proxy_set_header Host $host; proxy_redirect http:// https://; proxy_http_version 1.1; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection $connection_upgrade; } location /api/websocket { proxy_pass ip_to_hass:8123/api/websocket; proxy_set_header Host $host; proxy_http_version 1.1; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection $connection_upgrade; } } Router setup Use your router to port forward 443 to the ip of nginx docker host. Remember to portforward port 80 to same host setting up letsecrypt. Then you can remove it once you have the domain ownership established.","title":"nginx and lets encrypt"},{"location":"docker/nginx/#setup-nginx-letsencrypt-for-improved-security","text":"I let you know my configuration to setup the reverse proxy (nginx) as a front with SSL for Home Assistant. My setup enables: - Access Home Assistant with SSL from outside firewall through standard port and is routed to the home assistant on port 8123. - Access Home Assistant from within the network (behind firewall) without SSL and using http://ip:8123 - In future expose more services on standard port 443 by extending nginx config DISCLAIMER: I dont take any responsibility that this configuration is 100% secure. It is more secure than not using a reverse proxy I would argue but I am not making any guarantees. I would recommend you read how to configure this your self Many would argue to improve security at a pro level is to use a real firewall with different v-lans for your devices and computers. This is not covered in this setup.","title":"Setup nginx, letsencrypt for improved security"},{"location":"docker/nginx/#hass-config","text":"I use api password for security and not using trusted_networks for improved security. If you want to use trusted_networks I would not use a reverse proxy with x_forwarded_for: True config. There is a risk of hacking into hass by inserting the x_forwarded header without login! I also enabled ip-ban and login attempts for even better security. http: api_password: !secret http_password ip_ban_enabled: True login_attempts_threshold: 3 use_x_forwarded_for: True","title":"Hass config"},{"location":"docker/nginx/#linuxserverletsencrypt","text":"Setup the linux server by using the provided docker-compose file. Mine is configured to listen to port 80/443 and I setup my routers portforwarding to point to the host, hosting this docker image. You will need the port 80 open to allow the letsecrypt to validate ownership of your domain. After that is completed and you get your certificates you can just leave the 80 closed and only forward 443 or any custom port you want to expose from the internet. Just make sure you change that in the compose-file. Change the domain.example to your domain. If you use duckdns, use the whole address like xyz.duckdns.org . If you plan to expose several subdomains, use the SUBDOMAINS settings. At least expose the standard and www . But you might want to expose grafana.expample.com , just put ,grafana there. Copy the file and run sudo docker-compose up -d while on the same directory as the docker-compose.yaml file. Check the log to make sure the certificates are created correctly.","title":"linuxserver/letsencrypt"},{"location":"docker/nginx/#setup-nginx","text":"First you want the ssl to configured to the correct certificates.","title":"Setup nginx"},{"location":"docker/nginx/#1-ssl-certificates","text":"You can see the paths in the log. The ssl config are at: /opt/letsencrypt/config/ngingx/ssl.conf if you used my settings in docker-compose.yaml. Mine are in config folder (github) as reference. # ssl certs ssl_certificate /etc/letsencrypt/live/domain.example/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/domain.example/privkey.pem;","title":"1. SSL certificates"},{"location":"docker/nginx/#2-default-server","text":"Go to the folder /opt/letsencrypt/config/nginx/site-confs edit the default . See config folder here for reference. All requests by default both on 80 and 443 is redirected to return 444. server { listen 80; server_name _; return 444; } server { listen 443 ssl; server_name _; include /config/nginx/ssl.conf; return 444; }","title":"2. Default server"},{"location":"docker/nginx/#3-hassio-server","text":"Now we make a new file in /opt/letsencrypt/config/nginx/site-confs called hassio . The config is when you surf with domain.example (default 443) it routes it to your_hass_ip:8123. map $http_upgrade $connection_upgrade { default upgrade; '' close; } server { listen 443 ssl; server_name domain.example; include /config/nginx/ssl.conf; proxy_buffering off; location / { proxy_pass ip_to_hass:8123; proxy_set_header Host $host; proxy_redirect http:// https://; proxy_http_version 1.1; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection $connection_upgrade; } location /api/websocket { proxy_pass ip_to_hass:8123/api/websocket; proxy_set_header Host $host; proxy_http_version 1.1; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection $connection_upgrade; } }","title":"3. Hassio server"},{"location":"docker/nginx/#router-setup","text":"Use your router to port forward 443 to the ip of nginx docker host. Remember to portforward port 80 to same host setting up letsecrypt. Then you can remove it once you have the domain ownership established.","title":"Router setup"},{"location":"hass_dev/hass_development/","text":"My development setup This is my setup for doing development on home assistant. The remote features of VS.code is awesome and now when Home Assistant docker container is built upon startup it is a plug&play experience thanks to @pvizeli. Development of Hass Components PC: Any type of PC that are able to run linux containers VSCODE (Visual Studio Code) Remote Development extension installed on VSCODE GIT Home assistant remote debugging Make sure you install the remote debugger component \"ptvsd\" in hass. Then start hass from the home-assistant folder, the root. Also make sure you open the remote folder the same. Se rest of config for remote debugging. Typically I do the following steps: Clone your fork repo of Home Assistant as described in devdocs Open the folder \"Home-Assistant\" in VSCODE, not you will be prompted if you want to use the container, and you want that :) Now it starts new instance of VSCODE and builds container From terminal you can go to homeassistant folder and start hass as usual with \"hass\" Remote debugging component In the configuration.yaml file, add the ptvsd component. You can open the file on /root/.homeassistant/configuration.yaml from VSCODE remote container and add: ptvsd: wait: True # Set to True if you want hass to break and wait for debugger to attach Remote python debug setup in VSCODE Make sure you setup python remote attach debugger that should look something like this. Make sure the \"justMyCode\" is false or the breakpoint will not be working correctly. { \"name\": \"Python: Remote Attach\", \"type\": \"python\", \"request\": \"attach\", \"justMyCode\": false, \"port\": 5678, \"host\": \"localhost\", \"pathMappings\": [ { \"localRoot\": \"/workspaces/home-assistant/homeassistant\", \"remoteRoot\": \".\" } ] }","title":"My development setup"},{"location":"hass_dev/hass_development/#my-development-setup","text":"This is my setup for doing development on home assistant. The remote features of VS.code is awesome and now when Home Assistant docker container is built upon startup it is a plug&play experience thanks to @pvizeli.","title":"My development setup"},{"location":"hass_dev/hass_development/#development-of-hass","text":"","title":"Development of Hass"},{"location":"hass_dev/hass_development/#components","text":"PC: Any type of PC that are able to run linux containers VSCODE (Visual Studio Code) Remote Development extension installed on VSCODE GIT","title":"Components"},{"location":"hass_dev/hass_development/#home-assistant-remote-debugging","text":"Make sure you install the remote debugger component \"ptvsd\" in hass. Then start hass from the home-assistant folder, the root. Also make sure you open the remote folder the same. Se rest of config for remote debugging. Typically I do the following steps: Clone your fork repo of Home Assistant as described in devdocs Open the folder \"Home-Assistant\" in VSCODE, not you will be prompted if you want to use the container, and you want that :) Now it starts new instance of VSCODE and builds container From terminal you can go to homeassistant folder and start hass as usual with \"hass\"","title":"Home assistant remote debugging"},{"location":"hass_dev/hass_development/#remote-debugging-component","text":"In the configuration.yaml file, add the ptvsd component. You can open the file on /root/.homeassistant/configuration.yaml from VSCODE remote container and add: ptvsd: wait: True # Set to True if you want hass to break and wait for debugger to attach","title":"Remote debugging component"},{"location":"hass_dev/hass_development/#remote-python-debug-setup-in-vscode","text":"Make sure you setup python remote attach debugger that should look something like this. Make sure the \"justMyCode\" is false or the breakpoint will not be working correctly. { \"name\": \"Python: Remote Attach\", \"type\": \"python\", \"request\": \"attach\", \"justMyCode\": false, \"port\": 5678, \"host\": \"localhost\", \"pathMappings\": [ { \"localRoot\": \"/workspaces/home-assistant/homeassistant\", \"remoteRoot\": \".\" } ] }","title":"Remote python debug setup in VSCODE"},{"location":"system/1_proxmox/","text":"Setup the system I use an Intel NUC as my device setting upp the system. Hardware Intel NUC with at least 8 Gig memory plus VM mem size, I use 32 Gig but 16 would be enough Make sure you have enough harddrive space. I use 256 gig SSD. Bios boot and hit F2 (NUC) to enter. Look for boot order and boot devices. Make sure USB boot is prio. Make sure you enabled virtualization features of the processor. Prepare install Download the proxmox image at this site Get a USB stick with at least 1 gig memory Prepare the stick, I used rufus download Use the settings like below, specifically I used the DD mode (not ISO) to make the usb boot. Set the DD setting (Pardon the Swedish) and press OK. Install Put the usb in the NUC and reboot. Make sure you made hardware and bios correctly Set the admin/root password (DONT LOSE IT!) Choose harddrive where you install proxmox on Select correct country, keyboard layout and time-zone Install and reboot after install is done Test install by login to proxmox web interface wich are https://yourip:8006. Login with root/yourpassword Configure before creating first VM Add the No-Subscription Repository In order to get new images you need a repository. Give you have no subscription we have to add the correct repository. Add the pev-no-sybscription between the main contrib and security updates in the file: /etc/apt/sources.list deb http://ftp.debian.org/debian stretch main contrib # PVE pve-no-subscription repository provided by proxmox.com, # NOT recommended for production use deb http://download.proxmox.com/debian/pve stretch pve-no-subscription # security updates deb http://security.debian.org stretch/updates main contrib Remove the enterprise subscription Comment out the line deb https://enterprise.proxmox.com/debian/pve stretch pve-enterprise in the file /etc/apt/sources.list.d/pve-enterprise.list if you are not planning to get a subscription or you will get errors on apt-get update . Network For home users the default bridged network makes most sense so not extra network is configured. Multiple bridges can be created. For improved security, vlans can be setup. I might do this in a test environmet but will not use VLAN for now. Certificates I will use lets encrypt for certificate management. Todo: document this Add VM for Hassio Creating the virtual machine. Default values apply if not specified in the instructions or on image. Upload the ISO Download debian or what ever operating system you prefere. I use net install image of Debian 9. download here . Select amd64 CD or torrent if you prefer. Then select your ISO file and press Upload Add the VM General - Name: HASSIO - No resource pool OS - select your isofile and use rest default Hard disk I used 20 Gig as start disk, remember that the whole disk wont be allocated at once. This is the max size. CPU - 1 socket, 2 cores should be sufficent (I have 4 cores total) Memory - 2368 MiB should be sufficient for HASSIO and docker containers Network Default settings Create the VM by select the start the installation after created checkbox and press \"Finish\" Setup Debian Installation For other operating systems please see other. - double click on new host to get to screen - Install Debian with default settings. I used swedish as language and sweden as location - Choose host name, I use hassio - Set the root password - Set the non root name and username - Use whole disk and standard settings for partitioning - Use standard settings util you are at the software selection - Unselect debian environment and print server - Select \"SSH\" server, I am sure you want to connect remote to the machine - Install rest as default and reboot Screens from setup. (Sorry for Swedish): Install sudo Depending on your configuration you might need to install sudo. Enter su using $ su and enter password. Install sudo and add your user (the one you provided in installtime) and exit from su. $ apt-get install sudo $ adduser username sudo $ usermod -aG sudo youruser $ exit and the exit. Now you can use sudo for admin. if you get problems you might need to add the user in the sudoers file. $ su $ nano /etc/sudoers $ exit put the youruser ALL=(ALL:ALL) ALL after root IP configuration If you want the default DHCP IP just skip this step # Log in as root or su to root then nano /etc/network/interfaces # Should look like this: source /etc/network/interfaces.d/* # The loopback network interface auto lo iface lo inet loopback # The primary network interface allow-hotplug eth0 iface eth0 inet dhcp then change to : # The primary network interface allow-hotplug eth0 iface eth0 inet static address 192.168.1.202 netmask 255.255.255.0 gateway 192.0.1.1 Make sure your settings are correct. In an VM the eth0 is probable something else. To list network interfaces write ip link show to get the correct one. You need to select the ethernet interface. Finalizing the setup Now it is a good time to make a snapshot. A snapshot is a point in time to restart from. - First make sure the latest updates and uppgrades are on the base operating syste before making snapshot. $ sudo apt-get update $ sudo apt-get upgrade $ exit go to the proxmox web interface and select your host ant then select \"snapshot\". Create the snapshot. Call it \"Fresh\". Now we always can start fresh after installing hassio and all other stuff. CONGRATULATIONS YOUR FIRST VM IS UP AND RUNNING! Proxmox backup One of the best features running virtual environments is the possibility to backup entire machine really easy. Here is docs about how that's done. Use usb disk Mount the USB drive If you are running a windows system, the drive is probably a NTFS drive. This guide assumes this but there are basically very few difference with other format types. For full descriptions go to this url $ fdisk -l lists your disks, make sure you can see your drive. Take not of drive path i.e. /dev/? $ mkdir /media/usb-drive makes mount point $ mount /dev/sdc1 /media/usb-drive/ (sdc1 will probably be another device id for you), check #1 $ mount | grep sdc1 , to check if mount went ok if you later want to unmount the usb, the command is umount /media/usb-drive . To PERMANENTLY MAKE MOUNT AVAILABLE ATT BOOT then do following. $ blkid -t TYPE=ntfs -sUUID Check your unique id of drive. The type can be vfat if not windows formatted. In the file /etc/fstab add the following UUID=702432D524329DD2 /media/usb-drive ntfs defaults 0 0 REMEMBER TO USER YOUR OWN UUID and other type than ntfs if your drive is formatted non ntfs! Please be VERY CAREFUL to make sure everything is correct. This is why you should try mount manually first Add drive to Proxmox In datacenter view, select Storage Click, \"Add->Directory\" set your settings and Save Now you can use the drive as target disk making backups in proxmox!. Schedule backups In datacenter view, select Backup Add a backupscheme and select your new backupdisk ZFS I am using the system setup as NAS. 4 identical disks 2xstripe mirrored. This is at good alternative for speed and safety. Find other options for disk configurations online. I have on-line backup of my NAS this is why I dont use a \"safer\" configturation. Find the disks $ ls /dev/disk/by-id Copy the result and remove all lines with -partx. You will have the list of the unique id:s of the disks Create the zfs pool First I make one mirrored with two disks.Then I make a second stripe mirrored disk. Remember to use your ID:s of the disks you got from result above. I also default use compression on the pool. $ zpool create storage -m /mnt/storage mirror ata-WDC_WD40EFRX-68N32N0_WD-WCC7K0PN86VX ata-WDC_WD40EFRX-68N32N0_WD-WCC7K1TVP925 $ zpool add storage mirror ata-WDC_WD40EFRX-68N32N0_WD-WCC7K2ES2RH7 ata-WDC_WD40EFRX-68N32N0_WD-WCC7K6CZH2D3 $ zfs set compression=on storage $ zpool status status should be something like this. pool: storage state: ONLINE scan: none requested config: NAME STATE READ WRITE CKSUM storage ONLINE 0 0 0 mirror-0 ONLINE 0 0 0 ata-WDC_WD40EFRX-68N32N0_WD-WCC7K0PN86VX ONLINE 0 0 0 ata-WDC_WD40EFRX-68N32N0_WD-WCC7K1TVP925 ONLINE 0 0 0 mirror-1 ONLINE 0 0 0 ata-WDC_WD40EFRX-68N32N0_WD-WCC7K2ES2RH7 ONLINE 0 0 0 ata-WDC_WD40EFRX-68N32N0_WD-WCC7K6CZH2D3 ONLINE 0 0 0 Create more datasets Use the zfs create command to create the datasets. Example: $ zfs create storage/media Expose datasets trough LXC container turnkey.fileserver I choose to expose smb/NFS through easy admin turnkey fileserver. Update and check available. Use the current version of fileserver, please check when running available command. $ pveam update $ pveam available $ pveam download debian-9-turnkey-fileserver_15.0-1_amd64.tar.gz Create LCX Create LCX container with following properties: Property Value Host fileserver (or your name) Unpriveleged Should be \"unselected\" Password passwd (your pswd) template Name of your turnkey image downloaded memory 800 IPv4 Select static or DHCP and your settings Bind ZFS datatset to LCX container Edit the /etc/pve/lxc/100.conf file (the 100 should be replaced with the id of your container/VM) Add the line: mp0: /mnt/storage/media,mp=/mnt/storage/media This will bind the /mnt/storage/media dataset to a mount inside the container with the same path. Configure the container (fileserver) Follow the instructions for first time use. 1. Login using SSH using the root and password provided when you created the container. Use putty or any favourite client 2. Install From a browser, enter configuration using https://ip_of_your_container:12321 Search turnkey fileserver for information about configure the smb/NFS stuff. I use /mnt/storage/media as smb for example since i bound the zfs dataset to it.","title":"1. Setup the system - proxmox"},{"location":"system/1_proxmox/#setup-the-system","text":"I use an Intel NUC as my device setting upp the system.","title":"Setup the system"},{"location":"system/1_proxmox/#hardware","text":"Intel NUC with at least 8 Gig memory plus VM mem size, I use 32 Gig but 16 would be enough Make sure you have enough harddrive space. I use 256 gig SSD. Bios boot and hit F2 (NUC) to enter. Look for boot order and boot devices. Make sure USB boot is prio. Make sure you enabled virtualization features of the processor.","title":"Hardware"},{"location":"system/1_proxmox/#prepare-install","text":"Download the proxmox image at this site Get a USB stick with at least 1 gig memory Prepare the stick, I used rufus download Use the settings like below, specifically I used the DD mode (not ISO) to make the usb boot. Set the DD setting (Pardon the Swedish) and press OK.","title":"Prepare install"},{"location":"system/1_proxmox/#install","text":"Put the usb in the NUC and reboot. Make sure you made hardware and bios correctly Set the admin/root password (DONT LOSE IT!) Choose harddrive where you install proxmox on Select correct country, keyboard layout and time-zone Install and reboot after install is done Test install by login to proxmox web interface wich are https://yourip:8006. Login with root/yourpassword","title":"Install"},{"location":"system/1_proxmox/#configure-before-creating-first-vm","text":"","title":"Configure before creating first VM"},{"location":"system/1_proxmox/#add-the-no-subscription-repository","text":"In order to get new images you need a repository. Give you have no subscription we have to add the correct repository. Add the pev-no-sybscription between the main contrib and security updates in the file: /etc/apt/sources.list deb http://ftp.debian.org/debian stretch main contrib # PVE pve-no-subscription repository provided by proxmox.com, # NOT recommended for production use deb http://download.proxmox.com/debian/pve stretch pve-no-subscription # security updates deb http://security.debian.org stretch/updates main contrib","title":"Add the No-Subscription Repository"},{"location":"system/1_proxmox/#remove-the-enterprise-subscription","text":"Comment out the line deb https://enterprise.proxmox.com/debian/pve stretch pve-enterprise in the file /etc/apt/sources.list.d/pve-enterprise.list if you are not planning to get a subscription or you will get errors on apt-get update .","title":"Remove the enterprise subscription"},{"location":"system/1_proxmox/#network","text":"For home users the default bridged network makes most sense so not extra network is configured. Multiple bridges can be created. For improved security, vlans can be setup. I might do this in a test environmet but will not use VLAN for now.","title":"Network"},{"location":"system/1_proxmox/#certificates","text":"I will use lets encrypt for certificate management. Todo: document this","title":"Certificates"},{"location":"system/1_proxmox/#add-vm-for-hassio","text":"Creating the virtual machine. Default values apply if not specified in the instructions or on image.","title":"Add VM for Hassio"},{"location":"system/1_proxmox/#upload-the-iso","text":"Download debian or what ever operating system you prefere. I use net install image of Debian 9. download here . Select amd64 CD or torrent if you prefer. Then select your ISO file and press Upload","title":"Upload the ISO"},{"location":"system/1_proxmox/#add-the-vm","text":"General - Name: HASSIO - No resource pool OS - select your isofile and use rest default Hard disk I used 20 Gig as start disk, remember that the whole disk wont be allocated at once. This is the max size. CPU - 1 socket, 2 cores should be sufficent (I have 4 cores total) Memory - 2368 MiB should be sufficient for HASSIO and docker containers Network Default settings Create the VM by select the start the installation after created checkbox and press \"Finish\"","title":"Add the VM"},{"location":"system/1_proxmox/#setup-debian","text":"","title":"Setup Debian"},{"location":"system/1_proxmox/#installation","text":"For other operating systems please see other. - double click on new host to get to screen - Install Debian with default settings. I used swedish as language and sweden as location - Choose host name, I use hassio - Set the root password - Set the non root name and username - Use whole disk and standard settings for partitioning - Use standard settings util you are at the software selection - Unselect debian environment and print server - Select \"SSH\" server, I am sure you want to connect remote to the machine - Install rest as default and reboot Screens from setup. (Sorry for Swedish):","title":"Installation"},{"location":"system/1_proxmox/#install-sudo","text":"Depending on your configuration you might need to install sudo. Enter su using $ su and enter password. Install sudo and add your user (the one you provided in installtime) and exit from su. $ apt-get install sudo $ adduser username sudo $ usermod -aG sudo youruser $ exit and the exit. Now you can use sudo for admin. if you get problems you might need to add the user in the sudoers file. $ su $ nano /etc/sudoers $ exit put the youruser ALL=(ALL:ALL) ALL after root","title":"Install sudo"},{"location":"system/1_proxmox/#ip-configuration","text":"If you want the default DHCP IP just skip this step # Log in as root or su to root then nano /etc/network/interfaces # Should look like this: source /etc/network/interfaces.d/* # The loopback network interface auto lo iface lo inet loopback # The primary network interface allow-hotplug eth0 iface eth0 inet dhcp then change to : # The primary network interface allow-hotplug eth0 iface eth0 inet static address 192.168.1.202 netmask 255.255.255.0 gateway 192.0.1.1 Make sure your settings are correct. In an VM the eth0 is probable something else. To list network interfaces write ip link show to get the correct one. You need to select the ethernet interface.","title":"IP configuration"},{"location":"system/1_proxmox/#finalizing-the-setup","text":"Now it is a good time to make a snapshot. A snapshot is a point in time to restart from. - First make sure the latest updates and uppgrades are on the base operating syste before making snapshot. $ sudo apt-get update $ sudo apt-get upgrade $ exit go to the proxmox web interface and select your host ant then select \"snapshot\". Create the snapshot. Call it \"Fresh\". Now we always can start fresh after installing hassio and all other stuff. CONGRATULATIONS YOUR FIRST VM IS UP AND RUNNING!","title":"Finalizing the setup"},{"location":"system/1_proxmox/#proxmox-backup","text":"One of the best features running virtual environments is the possibility to backup entire machine really easy. Here is docs about how that's done.","title":"Proxmox backup"},{"location":"system/1_proxmox/#use-usb-disk","text":"","title":"Use usb disk"},{"location":"system/1_proxmox/#mount-the-usb-drive","text":"If you are running a windows system, the drive is probably a NTFS drive. This guide assumes this but there are basically very few difference with other format types. For full descriptions go to this url $ fdisk -l lists your disks, make sure you can see your drive. Take not of drive path i.e. /dev/? $ mkdir /media/usb-drive makes mount point $ mount /dev/sdc1 /media/usb-drive/ (sdc1 will probably be another device id for you), check #1 $ mount | grep sdc1 , to check if mount went ok if you later want to unmount the usb, the command is umount /media/usb-drive . To PERMANENTLY MAKE MOUNT AVAILABLE ATT BOOT then do following. $ blkid -t TYPE=ntfs -sUUID Check your unique id of drive. The type can be vfat if not windows formatted. In the file /etc/fstab add the following UUID=702432D524329DD2 /media/usb-drive ntfs defaults 0 0 REMEMBER TO USER YOUR OWN UUID and other type than ntfs if your drive is formatted non ntfs! Please be VERY CAREFUL to make sure everything is correct. This is why you should try mount manually first","title":"Mount the USB drive"},{"location":"system/1_proxmox/#add-drive-to-proxmox","text":"In datacenter view, select Storage Click, \"Add->Directory\" set your settings and Save Now you can use the drive as target disk making backups in proxmox!.","title":"Add drive to Proxmox"},{"location":"system/1_proxmox/#schedule-backups","text":"In datacenter view, select Backup Add a backupscheme and select your new backupdisk","title":"Schedule backups"},{"location":"system/1_proxmox/#zfs","text":"I am using the system setup as NAS. 4 identical disks 2xstripe mirrored. This is at good alternative for speed and safety. Find other options for disk configurations online. I have on-line backup of my NAS this is why I dont use a \"safer\" configturation.","title":"ZFS"},{"location":"system/1_proxmox/#find-the-disks","text":"$ ls /dev/disk/by-id Copy the result and remove all lines with -partx. You will have the list of the unique id:s of the disks","title":"Find the disks"},{"location":"system/1_proxmox/#create-the-zfs-pool","text":"First I make one mirrored with two disks.Then I make a second stripe mirrored disk. Remember to use your ID:s of the disks you got from result above. I also default use compression on the pool. $ zpool create storage -m /mnt/storage mirror ata-WDC_WD40EFRX-68N32N0_WD-WCC7K0PN86VX ata-WDC_WD40EFRX-68N32N0_WD-WCC7K1TVP925 $ zpool add storage mirror ata-WDC_WD40EFRX-68N32N0_WD-WCC7K2ES2RH7 ata-WDC_WD40EFRX-68N32N0_WD-WCC7K6CZH2D3 $ zfs set compression=on storage $ zpool status status should be something like this. pool: storage state: ONLINE scan: none requested config: NAME STATE READ WRITE CKSUM storage ONLINE 0 0 0 mirror-0 ONLINE 0 0 0 ata-WDC_WD40EFRX-68N32N0_WD-WCC7K0PN86VX ONLINE 0 0 0 ata-WDC_WD40EFRX-68N32N0_WD-WCC7K1TVP925 ONLINE 0 0 0 mirror-1 ONLINE 0 0 0 ata-WDC_WD40EFRX-68N32N0_WD-WCC7K2ES2RH7 ONLINE 0 0 0 ata-WDC_WD40EFRX-68N32N0_WD-WCC7K6CZH2D3 ONLINE 0 0 0","title":"Create the zfs pool"},{"location":"system/1_proxmox/#create-more-datasets","text":"Use the zfs create command to create the datasets. Example: $ zfs create storage/media","title":"Create more datasets"},{"location":"system/1_proxmox/#expose-datasets-trough-lxc-container-turnkeyfileserver","text":"I choose to expose smb/NFS through easy admin turnkey fileserver. Update and check available. Use the current version of fileserver, please check when running available command. $ pveam update $ pveam available $ pveam download debian-9-turnkey-fileserver_15.0-1_amd64.tar.gz","title":"Expose datasets trough LXC container turnkey.fileserver"},{"location":"system/1_proxmox/#create-lcx","text":"Create LCX container with following properties: Property Value Host fileserver (or your name) Unpriveleged Should be \"unselected\" Password passwd (your pswd) template Name of your turnkey image downloaded memory 800 IPv4 Select static or DHCP and your settings","title":"Create LCX"},{"location":"system/1_proxmox/#bind-zfs-datatset-to-lcx-container","text":"Edit the /etc/pve/lxc/100.conf file (the 100 should be replaced with the id of your container/VM) Add the line: mp0: /mnt/storage/media,mp=/mnt/storage/media This will bind the /mnt/storage/media dataset to a mount inside the container with the same path.","title":"Bind ZFS datatset to LCX container"},{"location":"system/1_proxmox/#configure-the-container-fileserver","text":"Follow the instructions for first time use. 1. Login using SSH using the root and password provided when you created the container. Use putty or any favourite client 2. Install From a browser, enter configuration using https://ip_of_your_container:12321 Search turnkey fileserver for information about configure the smb/NFS stuff. I use /mnt/storage/media as smb for example since i bound the zfs dataset to it.","title":"Configure the container (fileserver)"},{"location":"system/2_hassio/","text":"Install prereq and hassio This script requires a clean machine. It will install docker, docker-compose and hassio. Copy and paste the following script prior installing hassio. FIRST GO INTO SUDO MODE IF YOU HAVE SUDO!!! sudo -i Then copy following script! apt-get update &&\\ apt-get install -y \\ apt-transport-https \\ ca-certificates \\ curl \\ gnupg2 \\ software-properties-common &&\\ curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add - &&\\ add-apt-repository \\ \"deb [arch=amd64] https://download.docker.com/linux/debian \\ $(lsb_release -cs) \\ stable\" &&\\ apt-get update &&\\ apt-get install -y docker-ce docker-ce-cli containerd.io &&\\ curl -L \"https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose &&\\ sudo chmod +x /usr/local/bin/docker-compose &&\\ apt-get install -y apparmor-utils apt-transport-https avahi-daemon ca-certificates curl dbus jq network-manager &&\\ curl -sL \"https://raw.githubusercontent.com/home-assistant/hassio-build/master/install/hassio_install\" | bash -s","title":"2. Setup the system - Hassio"},{"location":"system/2_hassio/#install-prereq-and-hassio","text":"This script requires a clean machine. It will install docker, docker-compose and hassio. Copy and paste the following script prior installing hassio. FIRST GO INTO SUDO MODE IF YOU HAVE SUDO!!! sudo -i Then copy following script! apt-get update &&\\ apt-get install -y \\ apt-transport-https \\ ca-certificates \\ curl \\ gnupg2 \\ software-properties-common &&\\ curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add - &&\\ add-apt-repository \\ \"deb [arch=amd64] https://download.docker.com/linux/debian \\ $(lsb_release -cs) \\ stable\" &&\\ apt-get update &&\\ apt-get install -y docker-ce docker-ce-cli containerd.io &&\\ curl -L \"https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose &&\\ sudo chmod +x /usr/local/bin/docker-compose &&\\ apt-get install -y apparmor-utils apt-transport-https avahi-daemon ca-certificates curl dbus jq network-manager &&\\ curl -sL \"https://raw.githubusercontent.com/home-assistant/hassio-build/master/install/hassio_install\" | bash -s","title":"Install prereq and hassio"},{"location":"system/3_move_old_hassio/","text":"Move old settings from current Hassio installation Move a current installation is not as straight forward that one might home for. This is some of the stuff i figured out that could be of help if youre doing the same thing. Install backup from old HASSIO installation Get a backup and download it Login to your fresh copy of Hassio IMPORTANT! Before restoring backup, add the custom add-on paths to stores. If you not do this, the restore wont restore custom add-ons Make a restore of Hassio New IP for your machine If your new machine has a new ip address additional things need to be taken care of. I choose to keep my old installation and start fresh i.e. new ip. The upside doing a new setup is that you can keep your old until everything is up and running. Do a \"search in files\" of all references of your old ip address and replace with new one. Few add-ons needs to be reconfigured by remove/add them again. Like the samba share. Copy the settings json to a textfile and reapply them after reinstall Deconz integration needs to be removed and readded (easiest path) Check .storage folder and the config_entries . You will can find references to old ip there. Replace with your new one Tip setting up your new machine I converted all my separate docker-compose files to a single one. I also used the shared folder as destination when i configure my volumes in docker, i.e. /usr/share/hassio/share/docker/... . That way my docker container data is always backed up in a hassio snapshot.","title":"3. Move old settings to new"},{"location":"system/3_move_old_hassio/#move-old-settings-from-current-hassio-installation","text":"Move a current installation is not as straight forward that one might home for. This is some of the stuff i figured out that could be of help if youre doing the same thing.","title":"Move old settings from current Hassio installation"},{"location":"system/3_move_old_hassio/#install-backup-from-old-hassio-installation","text":"Get a backup and download it Login to your fresh copy of Hassio IMPORTANT! Before restoring backup, add the custom add-on paths to stores. If you not do this, the restore wont restore custom add-ons Make a restore of Hassio","title":"Install backup from old HASSIO installation"},{"location":"system/3_move_old_hassio/#new-ip-for-your-machine","text":"If your new machine has a new ip address additional things need to be taken care of. I choose to keep my old installation and start fresh i.e. new ip. The upside doing a new setup is that you can keep your old until everything is up and running. Do a \"search in files\" of all references of your old ip address and replace with new one. Few add-ons needs to be reconfigured by remove/add them again. Like the samba share. Copy the settings json to a textfile and reapply them after reinstall Deconz integration needs to be removed and readded (easiest path) Check .storage folder and the config_entries . You will can find references to old ip there. Replace with your new one","title":"New IP for your machine"},{"location":"system/3_move_old_hassio/#tip-setting-up-your-new-machine","text":"I converted all my separate docker-compose files to a single one. I also used the shared folder as destination when i configure my volumes in docker, i.e. /usr/share/hassio/share/docker/... . That way my docker container data is always backed up in a hassio snapshot.","title":"Tip setting up your new machine"},{"location":"system/4_hassop/","text":"Alternative way to install Hassio After my initial setup I found out there are possible to install Hassio directly as VM on proxmox using hassos! My strategy is to make local add-ons for any docker container I need for Home Assistant. In that way I can keep the server footprint very small and have \"all-in-one\" package to backup both hassio config plus VM. See whisker hassos install script for instructions. This script apply for proxmox. Warning! If you use several hassio instances on the same machine, disable discovery for yeelight on all but one. There are a bug that makes hass loop 100% cpu.","title":"3.1 Alternative hassos install"},{"location":"system/4_hassop/#alternative-way-to-install-hassio","text":"After my initial setup I found out there are possible to install Hassio directly as VM on proxmox using hassos! My strategy is to make local add-ons for any docker container I need for Home Assistant. In that way I can keep the server footprint very small and have \"all-in-one\" package to backup both hassio config plus VM. See whisker hassos install script for instructions. This script apply for proxmox.","title":"Alternative way to install Hassio"},{"location":"system/4_hassop/#warning","text":"If you use several hassio instances on the same machine, disable discovery for yeelight on all but one. There are a bug that makes hass loop 100% cpu.","title":"Warning!"},{"location":"system/5_opnsense_firewall/","text":"Firewall setup A good security gets more and more important, especially when dealing with IoT stuff. What happens it your IoT device gets hacked. How do we make sure it doesnt have full access to your network? Do we know if and where it sends usage and private data? At least we can make sure we make basic setup of a good firewall and segmented networks using VLANS. We have a wonderful piece of machine in Intel NUC that have alot of machine power left so I decided to use it as a firewall/router too. I am using OpnSense software and an extra USB ethernet dongle on the WAN side. I bought two used managed gigabit switches with VLAN capabilites. I also use the Unifi AP capability to set VLAN id to a SSID for the guest wifi and IoT wifi/network. I will explain it in the following chapters. The reader takes own responsibility of the security using this guide! Proxmox setup Networking I have two networking devices. The built-in ethernet and the usb dongle. For a computer I would advice to buy a normal ethernet card but for a NUC the USB will be fine. I also have two \"Linux bridges\", one for WAN (the usb one) and one for the LAN. Very important to add the \"VLAN Aware\" checkbox. This will make the bridge work like a switch for VLANS. Install opnsense If you want you can read the full installation guide of opnsense. This is how I configured it. Upload the OpnSense image. Create the VM, I use 2048 MiB memory, 3 cores, 20gig storage. GuestOS=Other. Use default LAN network, my case vmbr0. Add the WAN network device Add the VLAN network device in my case with tag=xx Hardware should look something like this: Start the VM and go to console Wait for the installation to end When prompted, login as \"installer\" and password \"opnsense\". Install defaults, now the FW is listening to \"192.168.1.1\" IMPORTANT, remove ISO from CD for the VM!!!! If you forget this it will start in live mode and no settings will be saved. Use web browser to login to \"root\" and use \"opnsense\" as password. Do the wizard. A tip is to use the old routers MAC address if you have binding to outside IP addresses. After wizard is done you have a basic setup of firewalled WAN/LAN Example of VLAN, Guest network As an example I use VLAN for guest network Wifi. Same can be applied to setup VLAN for IoT network. If you used my example you will have three networking interfaces. Now it is time to configure VLAN for the third taged one. Assign interface Goto Interfaces->Assignments You will se LAN and WAN and a third unassigned one. Click on it and click the enable checkbox Give it following settings and click \"Save\". Makse sure the subnetmask is NOT 32!! Setting Value Description Your description of the VLAN IPv4 Configuration Type Static IPv4 IPv4 address 10.1.2.1 (example) subnet mask 24 IPv4 Configuration Type Static IPv4 DHCP Now it is time to activate DHCP. Go to Services->DHCPv4->YOUR_NEW_INTERFACE Press enable DHCP server Set range from 10.1.2.100 to 10.1.2.200 and click \"Save\" Firewall rules for guestnet Goto Firewall->Rules->YOUR_NEW_INTERFACE Add a block rule that blocks everything from any source to LAN net. (The point with guest network that it cant access any LAN devices) Add a allow everything else rule by using all defaults and press save The result should look something like this Add the wifi setting I have a Unifi AP and controller. Create new network. If you already have a guest wifi setup, make sure your VLAN tag is the same. You will find the VLAN setting under ADVANCED OPTIONS. If you want you can setup more advanced guest network capabilities, like \"apply guest policies\" settings. 2. Now you can use a device to connect to the new guest network and make sure it get correct ip and gateway. Also check if you can reach internet and not get to local LAN devices. Important to test this!!!","title":"4 Firewall setup with guest network VLAN"},{"location":"system/5_opnsense_firewall/#firewall-setup","text":"A good security gets more and more important, especially when dealing with IoT stuff. What happens it your IoT device gets hacked. How do we make sure it doesnt have full access to your network? Do we know if and where it sends usage and private data? At least we can make sure we make basic setup of a good firewall and segmented networks using VLANS. We have a wonderful piece of machine in Intel NUC that have alot of machine power left so I decided to use it as a firewall/router too. I am using OpnSense software and an extra USB ethernet dongle on the WAN side. I bought two used managed gigabit switches with VLAN capabilites. I also use the Unifi AP capability to set VLAN id to a SSID for the guest wifi and IoT wifi/network. I will explain it in the following chapters. The reader takes own responsibility of the security using this guide!","title":"Firewall setup"},{"location":"system/5_opnsense_firewall/#proxmox-setup","text":"","title":"Proxmox setup"},{"location":"system/5_opnsense_firewall/#networking","text":"I have two networking devices. The built-in ethernet and the usb dongle. For a computer I would advice to buy a normal ethernet card but for a NUC the USB will be fine. I also have two \"Linux bridges\", one for WAN (the usb one) and one for the LAN. Very important to add the \"VLAN Aware\" checkbox. This will make the bridge work like a switch for VLANS.","title":"Networking"},{"location":"system/5_opnsense_firewall/#install-opnsense","text":"If you want you can read the full installation guide of opnsense. This is how I configured it. Upload the OpnSense image. Create the VM, I use 2048 MiB memory, 3 cores, 20gig storage. GuestOS=Other. Use default LAN network, my case vmbr0. Add the WAN network device Add the VLAN network device in my case with tag=xx Hardware should look something like this: Start the VM and go to console Wait for the installation to end When prompted, login as \"installer\" and password \"opnsense\". Install defaults, now the FW is listening to \"192.168.1.1\" IMPORTANT, remove ISO from CD for the VM!!!! If you forget this it will start in live mode and no settings will be saved. Use web browser to login to \"root\" and use \"opnsense\" as password. Do the wizard. A tip is to use the old routers MAC address if you have binding to outside IP addresses. After wizard is done you have a basic setup of firewalled WAN/LAN","title":"Install opnsense"},{"location":"system/5_opnsense_firewall/#example-of-vlan-guest-network","text":"As an example I use VLAN for guest network Wifi. Same can be applied to setup VLAN for IoT network. If you used my example you will have three networking interfaces. Now it is time to configure VLAN for the third taged one.","title":"Example of VLAN, Guest network"},{"location":"system/5_opnsense_firewall/#assign-interface","text":"Goto Interfaces->Assignments You will se LAN and WAN and a third unassigned one. Click on it and click the enable checkbox Give it following settings and click \"Save\". Makse sure the subnetmask is NOT 32!! Setting Value Description Your description of the VLAN IPv4 Configuration Type Static IPv4 IPv4 address 10.1.2.1 (example) subnet mask 24 IPv4 Configuration Type Static IPv4","title":"Assign interface"},{"location":"system/5_opnsense_firewall/#dhcp","text":"Now it is time to activate DHCP. Go to Services->DHCPv4->YOUR_NEW_INTERFACE Press enable DHCP server Set range from 10.1.2.100 to 10.1.2.200 and click \"Save\"","title":"DHCP"},{"location":"system/5_opnsense_firewall/#firewall-rules-for-guestnet","text":"Goto Firewall->Rules->YOUR_NEW_INTERFACE Add a block rule that blocks everything from any source to LAN net. (The point with guest network that it cant access any LAN devices) Add a allow everything else rule by using all defaults and press save The result should look something like this","title":"Firewall rules for guestnet"},{"location":"system/5_opnsense_firewall/#add-the-wifi-setting","text":"I have a Unifi AP and controller. Create new network. If you already have a guest wifi setup, make sure your VLAN tag is the same. You will find the VLAN setting under ADVANCED OPTIONS. If you want you can setup more advanced guest network capabilities, like \"apply guest policies\" settings. 2. Now you can use a device to connect to the new guest network and make sure it get correct ip and gateway. Also check if you can reach internet and not get to local LAN devices. Important to test this!!!","title":"Add the wifi setting"},{"location":"system/6_dockerhost_setup/","text":"Setup docker plattform using alpine Downlad and install alpine download alpine, the virtual version. Upload it to your favorite VM, I am using proxmox. VM should have properties something like this: Run the VM. Login as root and run setup-alpine Add docker Add to the file /etc/apk/repositories , http://uk.alpinelinux.org/alpine/latest-stable/community apk update apk add docker rc-update add docker boot service docker start Add docker-compose $ wget https://github.com/docker/compose/releases/download/1.24.0/docker-compose-Linux-x86_64 $ mv ./docker-compose-Linux-x86_64 ./docker-compose $ cp ./docker-compose /usr/local/bin $ chmod +x /usr/local/bin/docker-compose","title":"Setup docker plattform using alpine"},{"location":"system/6_dockerhost_setup/#setup-docker-plattform-using-alpine","text":"","title":"Setup docker plattform using alpine"},{"location":"system/6_dockerhost_setup/#downlad-and-install-alpine","text":"download alpine, the virtual version. Upload it to your favorite VM, I am using proxmox. VM should have properties something like this: Run the VM. Login as root and run setup-alpine","title":"Downlad and install alpine"},{"location":"system/6_dockerhost_setup/#add-docker","text":"Add to the file /etc/apk/repositories , http://uk.alpinelinux.org/alpine/latest-stable/community apk update apk add docker rc-update add docker boot service docker start","title":"Add docker"},{"location":"system/6_dockerhost_setup/#add-docker-compose","text":"$ wget https://github.com/docker/compose/releases/download/1.24.0/docker-compose-Linux-x86_64 $ mv ./docker-compose-Linux-x86_64 ./docker-compose $ cp ./docker-compose /usr/local/bin $ chmod +x /usr/local/bin/docker-compose","title":"Add docker-compose"}]}