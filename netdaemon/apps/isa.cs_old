using System;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using JoySoftware.HomeAssistant.NetDaemon.Common;

public class AirCleanerSchedule : NetDaemonApp
{
    #region -- config properties --
    public string? AutoScript { get; set; }
    public string? QuietScript { get; set; }
    public string? TurboScript { get; set; }
    public int? AutoHour { get; set; }
    public int? QuietHour { get; set; }

    #endregion

    // Used for logging at startup and no more
    private bool _appJustStarted = true;
    public override Task InitializeAsync()
    {
        if (!CheckConfig())
            return Task.CompletedTask;

        Scheduler.RunEvery(TimeSpan.FromHours(1), () => ChangeMode());

        // No async so return completed task
        return Task.CompletedTask;
    }

    private bool CheckConfig()
    {
        if (this.QuietScript == null ||
            this.AutoScript == null ||
            this.TurboScript == null)
            return false;

        return true;
    }

    private async Task ChangeMode()
    {
        try
        {
            // Calculate correct set departure time
            var now = DateTime.Now;
            int autoHour = this.AutoHour == null ? 11 : (int)this.AutoHour;
            int quietHour = this.QuietHour == null ? 21 : (int)this.QuietHour;

            var nextAuto = new DateTime(now.Year, now.Month, now.Day, autoHour, 0, 0);
            var nextQuiet = new DateTime(now.Year, now.Month, now.Day, quietHour, 0, 0);

            // Add the next day if we passed todays time
            if (nextAuto < now)
                nextAuto = nextAuto.AddDays(1);
            if (nextQuiet < now)
                nextQuiet = nextQuiet.AddDays(1);

            if (_appJustStarted)
            {
                // Just log some useful information if we at startup
                Log($"The time is {DateTime.Now}, if the time does not match local time, see time zone settings");
                Log($"Auto hours starting at {nextAuto}");
                Log($"Quiet hours starting at {nextQuiet}");
                _appJustStarted = false;
            }
            var totalMinutesUntilQuiet = nextQuiet.Subtract(now).TotalMinutes;
            var totalMinutesUntilAuto = nextAuto.Subtract(now).TotalMinutes;

            if (totalMinutesUntilQuiet <= 61)
            {
                if (!AnyoneHome())
                {

                    await CallService(Domain.Script, Service.TurnOn, new
                    {
                        entity_id = QuietScript
                    });
                    Log("Turning on quiet");
                }
            }
            else if (totalMinutesUntilAuto <= 61)
            {
                if (!AnyoneHome())
                {
                    await CallService(Domain.Script, Service.TurnOn, new
                    {
                        entity_id = AutoScript
                    });
                    Log("Turning on quiet");
                }
            }
        }
        catch (System.Exception e)
        {
            // Log all errors!
            Log("Error in air cleaner app", e, LogLevel.Error);
        }
    }
    private bool AnyoneHome()
    {
        try
        {
            var isa_location = GetState("person.isa")?.State?.ToString()?.ToLower();

            var stefan_location = GetState("person.stefan")?.State?.ToString()?.ToLower();
            if (isa_location != null || stefan_location != null)
            {
                if (stefan_location == "home" || stefan_location == "just arrived"
                || isa_location == "home" || isa_location == "just arrived")
                {
                    return true;
                }
                else return false;
            }
            // return true if null, assume someone could be home
            Log($"A person returned null as location state, assuming someone is home.");
            return true;
        }
        catch (System.Exception e)
        {
            // return true if something goes wrong, assume someone could be home
            Log($"Error: {e}");
            return true;
        }
    }
}